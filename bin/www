#!/usr/bin/env node

/**
 * Express www file
 * @requires app
 * @requires debug
 * @requires http
 * @requires PostgresConnection
 * @requires dotenv
 */
/**
 * app module
 * @const
 */
const app = require("../app");
/**
 * debug module
 * @const
 */
const debug = require("debug")("backend:server");
/**
 * http module
 * @const
 */
const http = require("http");
/**
 * PostgresConnection module
 * @const
 */
const PostgresConnection = require("../services/PostgresqlService");
/**
 * dotenv module
 */
require("dotenv").config();

/**
 * Running port
 * @const
 */
const port = normalizePort(process.env.PORT || "3000");
/**
 * Setting the provided port on the app.
 */
app.set("port", port);

/**
 * Create HTTP server.
 * @const
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Create a pool of connections with the Postgresql DB database.
 */
PostgresConnection.createInstance();

/**
 * Normalize a port into a number, string, or false.
 * @param val an specific port.
 * @return a valid port or false
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param error - An HTTP error.
 * @throws Will throw an error if the argument is different from listen.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
